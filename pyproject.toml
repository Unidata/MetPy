[build-system]
requires = ["setuptools>=42", "wheel", "setuptools_scm[toml]>=3.4"]
build-backend = "setuptools.build_meta"

[project]
name = "MetPy"
description = "Collection of tools for reading, visualizing and performing calculations with weather data."
readme = "README.md"
dynamic = ["version"]
maintainers = [{name = "MetPy Developers", email = "support-python@unidata.ucar.edu"}]
license = {text = "BSD-3-Clause"}
keywords = ["meteorology", "weather"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Matplotlib",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: BSD License"
]
requires-python = ">=3.9"
dependencies = [
    "matplotlib>=3.5.0",
    "numpy>=1.20.0",
    "pandas>=1.2.0",
    "pint>=0.15",
    "pooch>=1.2.0",
    "pyproj>=3.0.0",
    "scipy>=1.6.0",
    "traitlets>=5.0.5",
    "xarray>=0.18.0"
]

[project.entry-points."xarray.backends"]
gini = "metpy.io.gini:GiniXarrayBackend"

[project.optional-dependencies]
doc = [
    "metpy[examples]",
    "myst-parser",
    "netCDF4",
    "sphinx",
    "sphinx-gallery>=0.4",
    "sphinx-design",
    "pydata-sphinx-theme"
]
examples = [
    "geopandas>=0.6.0",
    "metpy[extras]"
]
test = [
    "netCDF4",
    "packaging>=21.0",
    "pytest>=6.2",
    "pytest-mpl"
]
extras = [
    "cartopy>=0.21.0",
    "dask>=2020.12.0",
    "shapely>=1.6.4"
]

[project.urls]
"homepage" = "https://github.com/Unidata/MetPy"
"Documentation" = "https://unidata.github.io/MetPy/"
"Release Notes" = "https://github.com/Unidata/MetPy/releases"
"Bug Tracker" = "https://github.com/Unidata/MetPy/issues"
"Source Code" = "https://github.com/Unidata/MetPy"
"Twitter" = "https://twitter.com/MetPy"
"MetPy Mondays" = "https://www.youtube.com/playlist?list=PLQut5OXpV-0ir4IdllSt1iEZKTwFBa7kO"

[tool.codespell]
skip = "*.tbl,*.ipynb,AUTHORS.txt,gempak.rst,.git,./staticdata,./docs/build,*.pdf,./talks"
exclude-file = ".codespellignore"

[tool.doc8]
ignore-path = ["docs/build", "docs/api/generated", "docs/_templates", "docs/tutorials",
    "docs/examples"]
file-encoding = "utf8"
max-line-length = 95

[tool.isort]
line_length = 95
known_first_party = ["metpy", "flake8_metpy"]
force_single_line = false
reverse_relative = true
use_parentheses = true
force_sort_within_sections = true
order_by_type = false
sort_relative_in_force_sorted_sections = true
combine_as_imports = true
combine_star = true

[tool.pytest.ini_options]
markers = "xfail_dask: marks tests as expected to fail with Dask arrays"
norecursedirs = "build docs .idea"
doctest_optionflags = "NORMALIZE_WHITESPACE"
mpl-results-path = "test_output"
xfail_strict = true

[tool.ruff]
line-length = 95
exclude = ["docs", "build", "src/metpy/io/_metar_parser/metar_parser.py"]
select = ["A", "B", "C", "D", "E", "E226", "F", "G", "I", "N", "Q", "R", "S", "T", "U", "W"]
ignore = ["F405", "I001", "RET504", "RET505", "RET506", "RET507", "RUF100"]
preview = true
explicit-preview-rules = true

[tool.ruff.per-file-ignores]
"ci/filter_links.py" = ["E731", "T201", "S603", "S607"]
"docs/doc-server.py" = ["T201"]
"examples/*.py" = ["D", "T201", "B018"]
"src/metpy/_vendor/xarray.py" = ["UP032"]
"src/metpy/deprecation.py" = ["UP032"]
"src/metpy/testing.py" = ["S101"]
"src/metpy/io/nexrad.py" = ["S101"]
"tests/*/*.py" = ["S101"]
"tests/test_*.py" = ["S101"]
"tests/test_xarray.py" = ["S101", "B018"]
"tools/flake8-metpy/test*.py" = ["S101"]
"tools/nexrad_msgs/parse_spec.py" = ["B028", "S101"]
"tutorials/*.py" = ["D", "T201", "B018"]

[tool.ruff.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.isort]
known-first-party = ["metpy", "flake8_metpy"]
force-single-line = false
relative-imports-order = "closest-to-furthest"
force-sort-within-sections = true
order-by-type = false
combine-as-imports = true

[tool.ruff.mccabe]
max-complexity = 61

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.setuptools_scm]
version_scheme = "post-release"
