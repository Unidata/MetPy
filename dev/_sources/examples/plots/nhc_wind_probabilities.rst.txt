
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plots/nhc_wind_probabilities.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_plots_nhc_wind_probabilities.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plots_nhc_wind_probabilities.py:


=================================
NOAA NHC Wind Speed Probabilities
=================================

Demonstrate the use of geoJSON and shapefile data with PlotGeometry in MetPy's simplified
plotting interface. This example walks through plotting cities, along with 5-day
tropical-storm-force wind speed probabilities from NOAA National Hurricane Center.

The wind probabilities shapefile was retrieved from the `National Hurricane Center's GIS page
<https://www.nhc.noaa.gov/gis/>`_. The cities shapefile was retrieved from `Stanford Libraries
<https://earthworks.stanford.edu/catalog/stanford-bx729wr3020>`_.

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: Python


    import geopandas

    from metpy.cbook import get_test_data
    from metpy.plots import MapPanel, PanelContainer, PlotGeometry








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Read in the shapefile file containing the wind probabilities.

.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: Python

    wind_data = geopandas.read_file(get_test_data('nhc_wind_prob_2021082012.zip'))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyogrio/geopandas.py:275: UserWarning: More than one layer found in 'pyogrio_1f803d2c930241c687789f8af0938bce.zip': '2021082012_wsp34knt120hr_5km' (default), '2021082012_wsp50knt120hr_5km', '2021082012_wsp64knt120hr_5km'. Specify layer parameter to avoid this warning.
      result = read_func(




.. GENERATED FROM PYTHON SOURCE LINES 28-30

Add the color scheme to the GeoDataFrame. This is the same color scheme used by the National
Hurricane Center for their wind speed probability plots.

.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: Python

    wind_data['fill'] = ['none', '#008B00', '#00CD00', '#7FFF00', '#FFFF00', '#FFD700',
                         '#CD8500', '#FF7F00', '#CD0000', '#8B0000', '#8B008B']
    wind_data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>PERCENTAGE</th>
          <th>geometry</th>
          <th>fill</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>&lt;5%</td>
          <td>MULTIPOLYGON (((-148.82395 16.55476, -148.8239...</td>
          <td>none</td>
        </tr>
        <tr>
          <th>1</th>
          <td>5-10%</td>
          <td>MULTIPOLYGON (((-150.35245 19.02733, -150.3524...</td>
          <td>#008B00</td>
        </tr>
        <tr>
          <th>2</th>
          <td>10-20%</td>
          <td>MULTIPOLYGON (((-150.53228 19.61176, -150.5322...</td>
          <td>#00CD00</td>
        </tr>
        <tr>
          <th>3</th>
          <td>20-30%</td>
          <td>MULTIPOLYGON (((-144.55314 19.8815, -144.55314...</td>
          <td>#7FFF00</td>
        </tr>
        <tr>
          <th>4</th>
          <td>30-40%</td>
          <td>MULTIPOLYGON (((-144.19349 19.97141, -144.1934...</td>
          <td>#FFFF00</td>
        </tr>
        <tr>
          <th>5</th>
          <td>40-50%</td>
          <td>MULTIPOLYGON (((-144.37331 20.10628, -144.3733...</td>
          <td>#FFD700</td>
        </tr>
        <tr>
          <th>6</th>
          <td>50-60%</td>
          <td>MULTIPOLYGON (((-144.23845 20.19619, -144.2384...</td>
          <td>#CD8500</td>
        </tr>
        <tr>
          <th>7</th>
          <td>60-70%</td>
          <td>MULTIPOLYGON (((-142.88977 20.42097, -142.8897...</td>
          <td>#FF7F00</td>
        </tr>
        <tr>
          <th>8</th>
          <td>70-80%</td>
          <td>MULTIPOLYGON (((-144.01367 20.33106, -144.0136...</td>
          <td>#CD0000</td>
        </tr>
        <tr>
          <th>9</th>
          <td>80-90%</td>
          <td>MULTIPOLYGON (((-93.43823 19.47689, -93.43823 ...</td>
          <td>#8B0000</td>
        </tr>
        <tr>
          <th>10</th>
          <td>&gt;90%</td>
          <td>MULTIPOLYGON (((-144.05862 20.46592, -144.0586...</td>
          <td>#8B008B</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 35-36

Read in the shapefile file containing the cities.

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: Python

    cities = geopandas.read_file(get_test_data('us_cities.zip'))








.. GENERATED FROM PYTHON SOURCE LINES 39-41

There are thousands of cities in the United States. We choose a few cities here that we want
to display on our plot.

.. GENERATED FROM PYTHON SOURCE LINES 41-51

.. code-block:: Python

    cities = cities.loc[
        ((cities['NAME'] == 'Myrtle Beach') & (cities['STATE'] == 'SC'))
        | ((cities['NAME'] == 'Hatteras') & (cities['STATE'] == 'NC'))
        | ((cities['NAME'] == 'Ocean City') & (cities['STATE'] == 'MD'))
        | ((cities['NAME'] == 'New York') & (cities['STATE'] == 'NY'))
        | ((cities['NAME'] == 'Nantucket') & (cities['STATE'] == 'MA'))
        | ((cities['NAME'] == 'Portland') & (cities['STATE'] == 'ME'))
    ]
    cities






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>GNIS_ID</th>
          <th>ANSICODE</th>
          <th>FEATURE</th>
          <th>FEATURE2</th>
          <th>NAME</th>
          <th>POP_2010</th>
          <th>COUNTY</th>
          <th>COUNTYFIPS</th>
          <th>STATE</th>
          <th>STATE_FIPS</th>
          <th>LATITUDE</th>
          <th>LONGITUDE</th>
          <th>PopPlLat</th>
          <th>PopPlLong</th>
          <th>ELEV_IN_M</th>
          <th>ELEV_IN_FT</th>
          <th>geometry</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>327</th>
          <td>573692.0</td>
          <td>582683</td>
          <td>Civil</td>
          <td>County Seat</td>
          <td>Portland</td>
          <td>66194.0</td>
          <td>Cumberland</td>
          <td>005</td>
          <td>ME</td>
          <td>23</td>
          <td>43.661471</td>
          <td>-70.255326</td>
          <td>43.661471</td>
          <td>-70.255326</td>
          <td>19.0</td>
          <td>62.0</td>
          <td>POINT (-70.25533 43.66147)</td>
        </tr>
        <tr>
          <th>4913</th>
          <td>616716.0</td>
          <td>2378175</td>
          <td>Census</td>
          <td>County Seat</td>
          <td>Nantucket</td>
          <td>7446.0</td>
          <td>Nantucket</td>
          <td>019</td>
          <td>MA</td>
          <td>25</td>
          <td>41.283456</td>
          <td>-70.099461</td>
          <td>41.283456</td>
          <td>-70.099461</td>
          <td>7.0</td>
          <td>23.0</td>
          <td>POINT (-70.09946 41.28346)</td>
        </tr>
        <tr>
          <th>6259</th>
          <td>586284.0</td>
          <td>2391341</td>
          <td>Civil</td>
          <td>-999</td>
          <td>Ocean City</td>
          <td>7102.0</td>
          <td>Worcester</td>
          <td>047</td>
          <td>MD</td>
          <td>24</td>
          <td>38.336503</td>
          <td>-75.084906</td>
          <td>38.336503</td>
          <td>-75.084906</td>
          <td>1.0</td>
          <td>3.0</td>
          <td>POINT (-75.08491 38.3365)</td>
        </tr>
        <tr>
          <th>8329</th>
          <td>-999.0</td>
          <td>2395220</td>
          <td>Civil</td>
          <td>-999</td>
          <td>New York</td>
          <td>8175133.0</td>
          <td>New York</td>
          <td>061</td>
          <td>NY</td>
          <td>36</td>
          <td>40.761493</td>
          <td>-73.981431</td>
          <td>40.663931</td>
          <td>-73.938270</td>
          <td>32.0</td>
          <td>105.0</td>
          <td>POINT (-73.98143 40.76149)</td>
        </tr>
        <tr>
          <th>14717</th>
          <td>1249770.0</td>
          <td>2404346</td>
          <td>Civil</td>
          <td>-999</td>
          <td>Myrtle Beach</td>
          <td>27109.0</td>
          <td>Horry</td>
          <td>051</td>
          <td>SC</td>
          <td>45</td>
          <td>33.689060</td>
          <td>-78.886694</td>
          <td>33.689060</td>
          <td>-78.886694</td>
          <td>8.0</td>
          <td>26.0</td>
          <td>POINT (-78.88669 33.68906)</td>
        </tr>
        <tr>
          <th>25784</th>
          <td>1020636.0</td>
          <td>2628633</td>
          <td>Census</td>
          <td>-999</td>
          <td>Hatteras</td>
          <td>504.0</td>
          <td>Dare</td>
          <td>055</td>
          <td>NC</td>
          <td>37</td>
          <td>35.219342</td>
          <td>-75.690161</td>
          <td>35.219342</td>
          <td>-75.690161</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>POINT (-75.69016 35.21934)</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 52-53

Make sure that both GeoDataFrames have the same coordinate reference system (CRS).

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: Python

    cities = cities.to_crs(wind_data.crs)








.. GENERATED FROM PYTHON SOURCE LINES 56-60

We want to find out what the probability of tropical-storm-force winds is for each of the
cities we selected above. Geopandas provides a spatial join method, which merges the two
GeoDataFrames and can tell us which wind speed probability polygon each of our city points
lies within. That information is stored in the 'PERCENTAGE' column below.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python

    cities = geopandas.sjoin(cities, wind_data, how='left', predicate='within')
    cities






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>GNIS_ID</th>
          <th>ANSICODE</th>
          <th>FEATURE</th>
          <th>FEATURE2</th>
          <th>NAME</th>
          <th>POP_2010</th>
          <th>COUNTY</th>
          <th>COUNTYFIPS</th>
          <th>STATE</th>
          <th>STATE_FIPS</th>
          <th>LATITUDE</th>
          <th>LONGITUDE</th>
          <th>PopPlLat</th>
          <th>PopPlLong</th>
          <th>ELEV_IN_M</th>
          <th>ELEV_IN_FT</th>
          <th>geometry</th>
          <th>index_right</th>
          <th>PERCENTAGE</th>
          <th>fill</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>327</th>
          <td>573692.0</td>
          <td>582683</td>
          <td>Civil</td>
          <td>County Seat</td>
          <td>Portland</td>
          <td>66194.0</td>
          <td>Cumberland</td>
          <td>005</td>
          <td>ME</td>
          <td>23</td>
          <td>43.661471</td>
          <td>-70.255326</td>
          <td>43.661471</td>
          <td>-70.255326</td>
          <td>19.0</td>
          <td>62.0</td>
          <td>POINT (-70.25533 43.66147)</td>
          <td>5</td>
          <td>40-50%</td>
          <td>#FFD700</td>
        </tr>
        <tr>
          <th>4913</th>
          <td>616716.0</td>
          <td>2378175</td>
          <td>Census</td>
          <td>County Seat</td>
          <td>Nantucket</td>
          <td>7446.0</td>
          <td>Nantucket</td>
          <td>019</td>
          <td>MA</td>
          <td>25</td>
          <td>41.283456</td>
          <td>-70.099461</td>
          <td>41.283456</td>
          <td>-70.099461</td>
          <td>7.0</td>
          <td>23.0</td>
          <td>POINT (-70.09946 41.28346)</td>
          <td>8</td>
          <td>70-80%</td>
          <td>#CD0000</td>
        </tr>
        <tr>
          <th>6259</th>
          <td>586284.0</td>
          <td>2391341</td>
          <td>Civil</td>
          <td>-999</td>
          <td>Ocean City</td>
          <td>7102.0</td>
          <td>Worcester</td>
          <td>047</td>
          <td>MD</td>
          <td>24</td>
          <td>38.336503</td>
          <td>-75.084906</td>
          <td>38.336503</td>
          <td>-75.084906</td>
          <td>1.0</td>
          <td>3.0</td>
          <td>POINT (-75.08491 38.3365)</td>
          <td>3</td>
          <td>20-30%</td>
          <td>#7FFF00</td>
        </tr>
        <tr>
          <th>8329</th>
          <td>-999.0</td>
          <td>2395220</td>
          <td>Civil</td>
          <td>-999</td>
          <td>New York</td>
          <td>8175133.0</td>
          <td>New York</td>
          <td>061</td>
          <td>NY</td>
          <td>36</td>
          <td>40.761493</td>
          <td>-73.981431</td>
          <td>40.663931</td>
          <td>-73.938270</td>
          <td>32.0</td>
          <td>105.0</td>
          <td>POINT (-73.98143 40.76149)</td>
          <td>5</td>
          <td>40-50%</td>
          <td>#FFD700</td>
        </tr>
        <tr>
          <th>14717</th>
          <td>1249770.0</td>
          <td>2404346</td>
          <td>Civil</td>
          <td>-999</td>
          <td>Myrtle Beach</td>
          <td>27109.0</td>
          <td>Horry</td>
          <td>051</td>
          <td>SC</td>
          <td>45</td>
          <td>33.689060</td>
          <td>-78.886694</td>
          <td>33.689060</td>
          <td>-78.886694</td>
          <td>8.0</td>
          <td>26.0</td>
          <td>POINT (-78.88669 33.68906)</td>
          <td>0</td>
          <td>&lt;5%</td>
          <td>none</td>
        </tr>
        <tr>
          <th>25784</th>
          <td>1020636.0</td>
          <td>2628633</td>
          <td>Census</td>
          <td>-999</td>
          <td>Hatteras</td>
          <td>504.0</td>
          <td>Dare</td>
          <td>055</td>
          <td>NC</td>
          <td>37</td>
          <td>35.219342</td>
          <td>-75.690161</td>
          <td>35.219342</td>
          <td>-75.690161</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>POINT (-75.69016 35.21934)</td>
          <td>2</td>
          <td>10-20%</td>
          <td>#00CD00</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 64-67

Plot the wind speed probability polygons from the 'geometry' column. Use the 'fill' column
we created above as the fill colors for the polygons, and set the stroke color to 'none' for
all of the polygons.

.. GENERATED FROM PYTHON SOURCE LINES 67-72

.. code-block:: Python

    wind_geo = PlotGeometry()
    wind_geo.geometry = wind_data['geometry']
    wind_geo.fill = wind_data['fill']
    wind_geo.stroke = 'none'








.. GENERATED FROM PYTHON SOURCE LINES 73-76

Plot the cities from the 'geometry' column, marked with diamonds ('D'). Label each point
with the name of the city, and it's probability of tropical-storm-force winds on the line
below. Points are set to plot in white and the font color is set to black.

.. GENERATED FROM PYTHON SOURCE LINES 76-83

.. code-block:: Python

    city_geo = PlotGeometry()
    city_geo.geometry = cities['geometry']
    city_geo.marker = 'D'
    city_geo.labels = cities['NAME'] + '\n(' + cities['PERCENTAGE'] + ')'
    city_geo.fill = 'white'
    city_geo.label_facecolor = 'black'








.. GENERATED FROM PYTHON SOURCE LINES 84-86

Add the geometry plots to a panel and container. Finally, we are left with a complete plot of
wind speed probabilities, along with some select cities and their specific probabilities.

.. GENERATED FROM PYTHON SOURCE LINES 86-97

.. code-block:: Python

    panel = MapPanel()
    panel.title = 'NHC 5-Day Tropical-Storm-Force Wind Probabilities (Valid 12z Aug 20 2021)'
    panel.plots = [wind_geo, city_geo]
    panel.area = [-90, -52, 27, 48]
    panel.projection = 'mer'
    panel.layers = ['lakes', 'land', 'ocean', 'states', 'coastline', 'borders']

    pc = PanelContainer()
    pc.size = (12, 10)
    pc.panels = [panel]
    pc.show()



.. image-sg:: /examples/plots/images/sphx_glr_nhc_wind_probabilities_001.png
   :alt: NHC 5-Day Tropical-Storm-Force Wind Probabilities (Valid 12z Aug 20 2021)
   :srcset: /examples/plots/images/sphx_glr_nhc_wind_probabilities_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.677 seconds)


.. _sphx_glr_download_examples_plots_nhc_wind_probabilities.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: nhc_wind_probabilities.ipynb <nhc_wind_probabilities.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: nhc_wind_probabilities.py <nhc_wind_probabilities.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: nhc_wind_probabilities.zip <nhc_wind_probabilities.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
